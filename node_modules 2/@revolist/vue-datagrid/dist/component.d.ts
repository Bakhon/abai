import Vue, { CreateElement, VNode } from 'vue';
declare type WatchFunction = (this: Vue, newVal: any, oldVal: any) => void;
declare type WatchResult = {
    [prop: string]: WatchFunction;
};
declare const _default: {
    name: string;
    props: ("addTrimmed" | "autoSizeColumn" | "canFocus" | "clearFocus" | "colSize" | "columnTypes" | "columns" | "editors" | "exporting" | "filter" | "frameSize" | "getColumnStore" | "getColumns" | "getPlugins" | "getSource" | "getSourceStore" | "getVisibleSource" | "grouping" | "pinnedBottomSource" | "pinnedTopSource" | "plugins" | "range" | "readonly" | "refresh" | "registerVNode" | "resize" | "rowClass" | "rowDefinitions" | "rowHeaders" | "rowSize" | "scrollToColumnIndex" | "scrollToColumnProp" | "scrollToCoordinate" | "scrollToRow" | "setCellEdit" | "source" | "theme" | "trimmedRows" | "updateColumnSorting" | "updateColumns")[];
    watch: WatchResult;
    render(this: Vue, h: CreateElement): VNode;
};
export default _default;
