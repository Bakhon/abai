import { RevoGrid, Selection } from '../../interfaces';
import DimensionProvider from '../../services/dimension.provider';
import SelectionStoreConnector from '../../services/selection.store.connector';
import ViewportProvider from '../../services/viewport.provider';
import { OrdererService } from '../order/orderRenderer';
import GridScrollingService from './viewport.scrolling.service';
import { ViewportProps } from './viewport.interfaces';
import ColumnDataProvider from '../../services/column.data.provider';
import { DataProvider } from '../../services/data.provider';
export default abstract class GridRenderService {
  abstract columnProvider: ColumnDataProvider;
  abstract dataProvider: DataProvider;
  abstract dimensionProvider: DimensionProvider;
  abstract viewportProvider: ViewportProvider;
  protected abstract uuid: string | null;
  protected abstract scrollingService: GridScrollingService;
  protected orderService: OrdererService;
  protected selectionStoreConnector: SelectionStoreConnector;
  /**
   * Transform data from stores and apply it to different components
   */
  protected getViewportColumnData(contentHeight: number): ViewportProps[];
  viewportConnectedCallback(): void;
  /** Collect Column data */
  private gatherColumnData;
  /** Collect Row data */
  private dataViewPort;
  private dataPartition;
  private getStoresCoordinates;
  scrollToCell(cell: Partial<Selection.Cell>): void;
  /**
   * Clear current grid focus
   */
  clearFocused(): void;
  setEdit(rowIndex: number, colIndex: number, colType: RevoGrid.DimensionCols, rowType: RevoGrid.DimensionRows): void;
}
