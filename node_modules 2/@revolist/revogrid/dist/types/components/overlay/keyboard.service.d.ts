import { EventEmitter } from '../../stencil-public-runtime';
import { Observable, Selection, Edition } from '../../interfaces';
import SelectionStoreService from '../../store/selection/selection.store.service';
import ColumnService from '../data/columnService';
import { EventData } from './selection.utils';
export declare abstract class KeyboardService {
  protected abstract selectionStoreService: SelectionStoreService;
  protected abstract columnService: ColumnService;
  abstract selectionStore: Observable<Selection.SelectionStoreState>;
  abstract range: boolean;
  abstract internalPaste: EventEmitter;
  protected abstract doEdit(val?: any, isCancel?: boolean): void;
  protected abstract clearCell(): void;
  protected abstract canEdit(): boolean;
  protected abstract onCellEdit(e: Edition.SaveDataDetails, clear?: boolean): void;
  protected abstract getData(): any;
  private ctrlDown;
  keyDown(e: KeyboardEvent): Promise<void>;
  protected keyChangeSelection(e: KeyboardEvent): Promise<boolean>;
  keyPositionChange(changes: Partial<Selection.Cell>, eData: EventData, range?: Selection.RangeArea, focus?: Selection.Cell, isMulti?: boolean): boolean;
  keyUp(e: KeyboardEvent): void;
  isCopy(e: KeyboardEvent): boolean;
  isPaste(e: KeyboardEvent): boolean;
  /** Monitor key direction changes */
  changeDirectionKey(e: KeyboardEvent, canRange: boolean): {
    changes: Partial<Selection.Cell>;
    isMulti?: boolean;
  } | void;
}
