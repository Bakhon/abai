import { EventEmitter, VNode } from '../../stencil-public-runtime';
import { Observable, Selection, RevoGrid, Edition } from '../../interfaces';
import { EventData } from './selection.utils';
import SelectionStoreService from '../../store/selection/selection.store.service';
import ColumnService from '../data/columnService';
import { DataSourceState } from '../../store/dataSource/data.store';
declare enum AutoFillType {
  selection = "Selection",
  autoFill = "AutoFill"
}
export declare abstract class AutoFillService {
  abstract dimensionRow: Observable<RevoGrid.DimensionSettingsState>;
  abstract dimensionCol: Observable<RevoGrid.DimensionSettingsState>;
  protected abstract selectionStoreService: SelectionStoreService;
  protected abstract columnService: ColumnService;
  abstract dataStore: Observable<DataSourceState<RevoGrid.DataType, RevoGrid.DimensionRows>>;
  abstract setTempRange: EventEmitter<Selection.TempRange | null>;
  abstract internalSelectionChanged: EventEmitter<Selection.ChangedRange>;
  abstract internalRangeDataApply: EventEmitter<Edition.BeforeRangeSaveDataDetails>;
  abstract setRange: EventEmitter<Selection.RangeArea>;
  protected abstract getData(): any;
  private autoFillType;
  private autoFillInitial;
  private autoFillStart;
  private autoFillLast;
  private onMouseMoveAutofill;
  /**
   * Render autofill box
   * @param range
   * @param selectionFocus
   */
  protected renderAutofill(range: Selection.RangeArea, selectionFocus: Selection.Cell): VNode;
  get isAutoFill(): boolean;
  /** Process mouse move events */
  protected selectionMouseMove(e: MouseEvent): void;
  private getFocus;
  /**
   * Autofill logic:
   * on mouse move apply based on previous direction (if present)
   */
  private doAutofillMouseMove;
  /**
   * Range selection started
   * Mode @param type:
   * Can be triggered from MouseDown selection on element
   * Or can be triggered on corner square drag
   */
  protected selectionStart(e: MouseEvent, data: EventData, type?: AutoFillType): void;
  /** Clear current range selection */
  protected clearAutoFillSelection(): void;
  /** Trigger range apply events and handle responses */
  onRangeApply(data: RevoGrid.DataLookup, range: Selection.RangeArea): void;
  /** Apply range and copy data during range application */
  private applyRangeWithData;
  /** Update range selection ony, no data change (mouse selection) */
  private applyRangeOnly;
}
export {};
